# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QwaiBk5L3EAkjZAApno2NynaYH04WUPh
"""

import pandas as pd
import torch
from nltk.corpus import stopwords
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
#from x_transformers import XTransformer
from tqdm import tqdm  # Optional, for displaying a progress bar

#import nltk
#nltk.download('stopwords')

#from google.colab import drive
#drive.mount('/content/gdrive')
#import sys
#sys.path.append('drive/gdrive/MyDrive/NotebookDatasets/CMVRLG')

df = pd.read_csv('/content/gdrive/My Drive/Colab Notebooks/twitter_training.csv', names=['id', 'device', 'sentiment', 'tweet'])

df

df = df[df['sentiment']!='Irrelevant'].reset_index(drop=True)

def clean_text(text):
    if isinstance(text, str):
        # Remove numbers
        #text = re.sub(r'\d+', '', text)

        # Remove special characters
        #str_text = re.sub(r'[^\w\s]', '', text)

        # Remove stop words
        stop_words = set(stopwords.words('english'))
        tokens = text.lower().split()
        str_text = ' '.join([word for word in tokens if word not in stop_words])
        return str_text
    else:
        return str(text)

df['clean_tweet'] = df['tweet'].apply(clean_text)

df['length'] = df['clean_tweet'].apply(len)

df['length'].describe()

df['length'].quantile(0.90)

df['sentiment'] = df['sentiment'].astype(str)
df['tweet'] = df['tweet'].astype(str)

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

texts = df['tweet'].tolist()
labels = le.fit_transform(df['sentiment'].values)

train_texts, val_texts, train_labels, val_labels = train_test_split(texts, labels, test_size=0.2, random_state=42)

import torch
from transformers import BertTokenizer, BertModel, AdamW, get_linear_schedule_with_warmup

device = torch.device( "cuda" if torch.cuda.is_available() else "cpu")

#torch.cuda.set_device(0)

device

bert_model_name = 'bert-base-uncased'

from torch.utils.data import DataLoader, Dataset, RandomSampler
class TextClassificationDataset(Dataset):
    def __init__(self, texts, labels, tokenizer, max_length):
        self.texts = texts
        self.labels = labels
        self.tokenizer = tokenizer
        self.max_length = max_length
    def __len__(self):
        return len(self.texts)
    def __getitem__(self, idx):
        text = self.texts[idx]
        label = self.labels[idx]
        encoding = self.tokenizer(text, return_tensors='pt', max_length=self.max_length, padding='max_length', truncation=True)
        #print({'input_ids': encoding['input_ids'].flatten(), 'attention_mask': encoding['attention_mask'].flatten(), 'label': torch.tensor(label)})
        return {'input_ids': encoding['input_ids'].flatten(), 'attention_mask': encoding['attention_mask'].flatten(), 'label': torch.tensor(label)}

class BERTClassifier(torch.nn.Module):
    def __init__(self, bert_model_name, num_classes):
        super(BERTClassifier, self).__init__()
        self.bert = BertModel.from_pretrained(bert_model_name)
        self.dropout = torch.nn.Dropout(0.1)
        self.fc = torch.nn.Linear(self.bert.config.hidden_size, num_classes)

    def forward(self, input_ids, attention_mask):
        outputs = self.bert(input_ids=input_ids, attention_mask=attention_mask)
        pooled_output = outputs.pooler_output
        x = self.dropout(pooled_output)
        logits = self.fc(x)
        return logits

def train(data_loader, optimizer, scheduler, device, epoch):
    #print(device)
    model.train()
    #model = model.to(device)
    total_loss = 0
    for batch in tqdm(train_dataloader, desc=f"Training Epoch {epoch + 1}"):
        optimizer.zero_grad()
        input_ids = batch['input_ids'].to(device)
        attention_mask = batch['attention_mask'].to(device)
        labels = batch['label'].to(device)
        outputs = model(input_ids=input_ids, attention_mask=attention_mask)
        #print("outputs ", outputs)
        #print("labels ", labels)
        #labels = labels.astype('long')
        #print()
        labels = labels.type(torch.LongTensor).to(device)
        #outputs.to(device)
        loss = torch.nn.CrossEntropyLoss()(outputs, labels)
        #loss.to(device)
        loss.backward()
        optimizer.step()
        scheduler.step()
        total_loss += loss.item()
    avg_train_loss = total_loss / len(train_dataloader)
    print(f"Average training loss: {avg_train_loss}")
    return avg_train_loss

def evaluate(data_loader, device, epoch):
    #print(device)
    #model.to(device)
    model.eval()
    predictions = []
    actual_labels = []
    total_val_loss = 0
    with torch.no_grad():
        for batch in tqdm(data_loader, desc=f"Validation Epoch {epoch + 1}"):
            input_ids = batch['input_ids'].to(device)
            attention_mask = batch['attention_mask'].to(device)
            labels = batch['label'].to(device)
            outputs = model(input_ids=input_ids, attention_mask=attention_mask)
            _, preds = torch.max(outputs, dim=1)
            predictions.extend(preds.cpu().tolist())
            actual_labels.extend(labels.cpu().tolist())
            loss = torch.nn.CrossEntropyLoss()(outputs, labels)
            total_val_loss += loss.item()
    avg_val_loss = total_val_loss / len(val_dataloader)
    print(f"Average validation loss: {avg_val_loss}")
    return accuracy_score(actual_labels, predictions), classification_report(actual_labels, predictions)

def predict_sentiment(text, model, tokenizer, device, max_length=128):
    model.eval()
    encoding = tokenizer(text, return_tensors='pt', max_length=max_length, padding='max_length', truncation=True)
    input_ids = encoding['input_ids'].to(device)
    attention_mask = encoding['attention_mask'].to(device)

    with torch.no_grad():
        outputs = model(input_ids=input_ids, attention_mask=attention_mask)
        _, preds = torch.max(outputs, dim=1)
    return preds.item()#"positive" if preds.item() == 1 else "negative"

# Set up parameters
num_classes = 3
max_length = 170
batch_size = 16
num_epochs = 15
learning_rate = 2e-5

sampler = RandomSampler(TextClassificationDataset, replacement=True, num_samples=10)

tokenizer = BertTokenizer.from_pretrained(bert_model_name)

train_dataset = TextClassificationDataset(train_texts, train_labels, tokenizer, max_length)
val_dataset = TextClassificationDataset(val_texts, val_labels, tokenizer, max_length)
train_dataloader = DataLoader(dataset = train_dataset, #sampler=sampler,
                              batch_size=batch_size, drop_last=True, shuffle=True,)
val_dataloader = DataLoader(dataset  = val_dataset,#sampler=sampler,
                            batch_size=batch_size, drop_last=True, shuffle=False,)

model = BERTClassifier(bert_model_name, num_classes).to(device)

model.to(device)

optimizer = AdamW(model.parameters(), lr=learning_rate)
total_steps = len(train_dataloader) * num_epochs
scheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps=0, num_training_steps=total_steps)

epoch_avg_train_loss = []
epoch_accuracy = []
epoch_report = []
for epoch in range(num_epochs):
    #print(f"Epoch {epoch + 1}/{num_epochs}")
    avg_train_loss = train(train_dataloader, optimizer, scheduler, device, epoch)
    print('Average train loss: ', avg_train_loss)
    epoch_avg_train_loss.append(avg_train_loss)
    torch.save(model.state_dict(), "bert_sentiment_classifier.pth")
    accuracy, report = evaluate(val_dataloader, device, epoch)
    epoch_accuracy.append(accuracy)
    epoch_report.append(report)
    print(f"Validation Accuracy: {accuracy:.4f}")
    print(report)

torch.save(model.state_dict(), "bert_sentiment_classifier.pth")

# Test sentiment prediction
test_text = "The movie was great and I really enjoyed the performances of the actors."
sentiment = predict_sentiment(test_text, model, tokenizer, device)
print("The movie was great and I really enjoyed the performances of the actors.")
print(f"Predicted sentiment: {sentiment}")

